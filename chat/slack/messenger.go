package slack

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/PRAgarawal/rocketoff/chat"
	"github.com/nlopes/slack"
	"github.com/pkg/errors"
)

type slackMessenger struct {
	client *http.Client
}

func NewMessenger() chat.Messenger {
	return &slackMessenger{
		client: http.DefaultClient,
	}
}

// SendImageReply sends the given message (currently only supports sending an image by POSTing to the ephemeral responseURL, which was generated by the slash command
func (sm *slackMessenger) SendImageReply(reply *chat.CommandReply) error {
	raw, err := json.Marshal(slackMsg(reply))
	if err != nil {
		return errors.Wrap(err, "marshal failed")
	}

	_, err = http.DefaultClient.Post(reply.WebhookURL, "application/json", bytes.NewReader(raw))
	if err != nil {
		return errors.Wrap(err, "failed to post webhook")
	}
	return nil
}

// slackMsg takes a commandResponse interface from the endpoint layer, and builds a slack.Msg struct that can be written to an http.ResponseWriter.
func slackMsg(reply *chat.CommandReply) *slack.Msg {
	return &slack.Msg{
		Text:         fmt.Sprintf("with warm regards from %s", reply.RequestingUserName),
		ResponseType: slack.ResponseTypeInChannel,
		Attachments: []slack.Attachment{
			{
				ImageURL: reply.ImageURL,
			},
		},
	}
}
