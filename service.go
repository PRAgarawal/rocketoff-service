package rocketoff

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/nlopes/slack"
	"github.com/pkg/errors"

	kitlog "github.com/go-kit/kit/log"
)

const (
	theBeardGif    = "https://i.imgur.com/t7ddUae.gif"
	thePointGodGif = "https://i.imgur.com/c2qPNN2.gif"
)

// Service contains simple methods that can be used to generate responses to chat app slash commands.
type Service interface {
	// ShowEmTheBeard will reply with the specified URL a gif of James Harden, reminding those in the channel that they're lame. Not all of them. They will know who they are.
	ShowEmTheBeard(ctx context.Context, command *ImageCommand) error

	// ShowEmThePointGod will return a gif of Chris Paul, reminding those in the channel that they are not funny. Not all of them. They will know who they are.
	ShowEmThePointGod(ctx context.Context, command *ImageCommand) error
}

type ImageCommand struct {
	ResponseURL        string
	RequestingUsername string
}

type Svc struct {
	logger kitlog.Logger
}

func New(logger kitlog.Logger) Service {
	return &Svc{logger}
}

func (s *Svc) ShowEmTheBeard(_ context.Context, command *ImageCommand) error {
	msg := slackMsg(theBeardGif, command)
	if err := sendSlackMessage(command.ResponseURL, msg); err != nil {
		return err
	}
	s.logger.Log(
		"message", "successfully sent The Beard",
		"severity", "INFO",
	)

	return nil
}

func (s *Svc) ShowEmThePointGod(_ context.Context, command *ImageCommand) error {
	msg := slackMsg(thePointGodGif, command)
	if err := sendSlackMessage(command.ResponseURL, msg); err != nil {
		return err
	}
	s.logger.Log(
		"message", "successfully sent The Point God",
		"severity", "INFO",
	)

	return nil
}

// sendSlackMessage sends the given message by POSTing to the ephemeral responseURL, which was generated by the slash command
func sendSlackMessage(responseURL string, msg *slack.Msg) error {
	raw, err := json.Marshal(msg)
	if err != nil {
		return errors.Wrap(err, "marshal failed")
	}

	_, err = http.DefaultClient.Post(responseURL, "application/json", bytes.NewReader(raw))
	if err != nil {
		return errors.Wrap(err, "failed to post webhook")
	}
	return nil
}

// slackMsg takes a commandResponse interface from the endpoint layer, and builds a slack.Msg struct that can be written to an http.ResponseWriter.
func slackMsg(imageURL string, command *ImageCommand) *slack.Msg {
	return &slack.Msg{
		Text:         fmt.Sprintf("with warm regards from %s", command.RequestingUsername),
		ResponseType: slack.ResponseTypeInChannel,
		Attachments: []slack.Attachment{
			{
				ImageURL: imageURL,
			},
		},
	}
}
